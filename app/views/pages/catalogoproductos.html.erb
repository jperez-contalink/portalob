<!DOCTYPE html>
<html>
<head>
  <title>CAT PRO</title>
  <style>
    body {
      overflow-x: hidden;
    }

    a {
      color:black;
    }
    .selectAuto {
      width: 90%;
      border-radius: 4px;
    }
    #loader-wrapper {
      margin-left: 40%;                                                                                                                                                                                                                                                                                                                     
    }
      .item {
      height:200px;
      width:25%;
      border:15px solid white;
      background-color: #ECEDEF;
      background-size: 30%;
      background-repeat: no-repeat;                                                                                                   
      background-position: center;
      /*text-align: left;
      vertical-align: text-top;*/
      padding: 2% 1% 2% 1%;
      /*color:#585858;
      font-size: 150%;
      font-weight: bold;*/
      float:left;
      border-radius: 20px;
      display: inline-block;
    }
    .item:hover {
      color:#424242;
      background-color: #D0DEAB;
      background-size: 35%;
      font-size: 105%;
    }
    .precioExistencia {
      border:1px solid black;
      text-align: right;
      vertical-align: middle;
      /*middle: 25px;*/
    }
    .item h1 {
      color:#585858;
      font-size: 150%;
      vertical-align: text-top;
      text-align: left;
    }
    .item h2 {
      color:#585858;
      font-size: 100%;
      text-align: right;
      margin-bottom: 1cm;
      border: 0px solid blue;
    }    
    .filtroAplicado {
      color:grey;
    }
    #cat_fil_aplicados {
      display:none;
    }
      .itemA {
      height:200px;
      width:25%;
      border:15px solid white;
      background-color: white;
      padding: 0% 1% 1% 1%;
      float:left;
      border-radius: 20px;
      display: inline-block;
    }
    .itemA:hover {
      color:#424242;
      background-color: #D0DEAB;
      font-size: 105%;
      border:15px solid #D0DEAB;
    }
    .bgImage {
      height: 90px;
      border:0px solid black;
      background-size: 50%;
      background-repeat: no-repeat;
      background-position: center;
    }
    .txtPrecioLeft {
      width: 100%;
    }
    .txtPrecioRight {
      width: 100%;
    }
    /* CARRITO DE COMPRA*/
    .addProductLeft{
      padding: 1px 1px 1px 1px;
      border:0px solid green;
    }
    .addProductRight {
      padding: 1px 1px 1px 1px;
      border:0px solid blue;
    }
    .cartValue {
      padding: 2% 1% 2% 1%;
      border:0px solid black; 
      font-size: 160%;
      color: black;
    }
    .cartPrecio {
      padding: 2% 1% 2% 1%;
      border:0px solid pink;
      font-size: 250%;
      color: #2980b9;
      font-weight: bold;
    }
    .cartInventario {
      padding: 2% 1% 2% 1%;
      border:0px solid purple;
      font-size: 160%;
      color: black;
    }
    .cartBtn {
      padding: 1% 1% 1% 1%;
      border:0px solid black; 
      font-size: 160%;
      color: black;
    }
    .cartCantidad {
      font-size: 160%;
      color: black;
      padding: 1% 1% 1% 1%;
      border:0px solid black; 
    }
    .cartCantidad input[type=text]{
      text-align:center;
      width: 15%;
      font-size: 100%;
      color:#2980b9;
      border-radius: 7px;
      font-weight: bold;
    }
    .btn-anadir {
      width: 80%;
      padding: 3% 0% 3% 0%;
      border-radius: 5px;
    }
    .btn-close {
      border:0px solid white;
      background-color: transparent;
      font-size: 150%;
      font-weight: bold;
    }
    .txt_precio {
      width: 90%;
      padding: 1% 1% 1% 1%;
      margin: 3% 4% 0% 0%;
      border-radius: 6px;
    }
  </style>
</head>
<body><br><br><br><br><br><br>
  <div align="center"><h1>Catálogo de Productos</h1></div>
  <div id="alertas" style="width:100%;border:0px solid black;"></div>
  <div>
    <div id="cat_side" style="float:left;width:15%;">
      <div id="cat_fil_aplicados"><strong>Filtros Aplicados</strong><br><a class="borraFiltros">Borrar Filtros</a></div><br>
      <div id="cat_filter"></div>
    </div>
    <div id="cat_pro" style="float:left;width:85%;"></div>
    <div align="center" style="border:0px solid black;padding-left:15%;" id="cat_pag"></div>
    <!--<div style="float:left;width:85%;">
      <div align="center" id="cat_pro"></div>
      <div align="center" id="cat_pag"></div>
    </div>-->

  </div>

  <script type="text/javascript">
  // ROLES
  <% if current_usuario.role != "Cliente" %>
  console.log("RESTRICTED");
  document.getElementById("cat_pro").remove();
  window.location.href="/unauthorized"
  <% end %>
  // ROLES  
  var allData = {};
  var filterData = {};
  var allPrice = {};
  var searchData = {};
  var charHead = [];
  var charItem = [];
  var countProduct = 0;
  var actualPage = 1;
  var mostrarInventario = "<%= current_usuario.empresa.inventario %>";
  var mostrarMarca = "<%= current_usuario.empresa.filtromarca %>";
  var mostrarCategoria = "<%= current_usuario.empresa.filtrocategoria %>";
  var itemsChar = {
    heads: charHead,
    items: charItem
  };
  arrayFiltrosAuto = [];
  arrayAutoMarca = [];
  arrayAutoModelo = [];
  arrayAutoAno    = [];
  var displayFiltroMarca = true;
  var displayFiltroCategoria = true;

  $(document).ready( function() {
    console.log("Catalogo.");
    var cato = $('#cat_pro').Catalogo({
      koalas: "kaolitis"
  }).data('Catalogo');

  console.log("$> Consumir Servicio");
  var datox = {};
  $.ajax({
          type:"GET",
          dataType : 'json',
          url: "api/v1/precios",
          success: function(datos){
          console.log("Precios", datos);
          allPrice = jsonConstructorPrice(datos);
        $.ajax({
          type:"GET",
          dataType : 'json',
          url: "api/v1/productos",
          success: function(datos){
            console.log("Productos", datos);
            allData = jsonConstructor(datos, allPrice);
            filterData = allData;
            searchData = allData;
            cato.drawFiltros(allData);
            //cato.setData(allData);
            cambiaPaginaPLUS(1, 12);
            },
          error:  function(){ 
            var mensajeError = '<br><br><br><div align="center"><h1>Ups!! algo ha salido mal.</h1><h3>No ha sido posible entablar comunicación, por favor comuniquese con su proveedor.</h3></div>'
            document.getElementById("cat_pro").innerHTML = mensajeError;
          }
        }); // termina productos
          //cato.setData(allData);
      },
          error:  function(){ 
          var mensajeError = '<br><br><br><div align="center"><h1>Ups!! algo ha salido mal.</h1><h3>No ha sido posible entablar comunicación, por favor comuniquese con su proveedor [Pricing].</h3></div>'
            document.getElementById("cat_pro").innerHTML = mensajeError;
          }
  });  
  $("#cat_pro").on('keyup', '.btn_search', function (e) {
    console.log("Busqueda");
    e.preventDefault();
    var parametro = document.getElementById("txt_search").value;
    //cato.setData(buscarPalabra(parametro));
    //filterData = buscarPalabra(parametro);
    //cambiaPaginaPLUS(1, 12);
    //console.log("PALABRA: " + parametro);
    //buscarPalabra(parametro);
    var selected = [];
    $('#cat_filter input:checked').each(function() {
      selected.push($(this).attr('id'));
    });
    //console.log("selected: ", selected);
    multiFiltros(selected);
    document.getElementById("txt_search").value = parametro;
    $("body").scrollTop(0);    
    $( "#txt_search" ).focus();
  });
  $("#cat_pro").on('click', '.addProduct', function (e) {
    console.log("ADD PRODUCT HTML");
    e.preventDefault();
    $("body").scrollTop(0);
    console.log("E: ", e);
    var productId = e.currentTarget.id;
    document.getElementById('cat_pag').style.display = "none";
    document.getElementById("cat_pro").innerHTML = buildAddProduct(productId);
  });
  $("#cat_filter").on('click', '.btn_filtro_marcas', function (e) {
    console.log("COLAPSE MARCA");
    e.preventDefault();
    //document.getElementById('btn_filtro_marcas').style.display = "none";
    //var actual = document.getElementById('btn_filtro_marcas').style.display;
    //console.log("$> actual: " + actual);
    if (displayFiltroMarca == false) {
      document.getElementById('div_filtro_marcas').style.display = "block";
      document.getElementById('btn_filtro_marcas').innerHTML = '&nbsp;<span class="glyphicon glyphicon-triangle-top" aria-hidden="true"></span>';
      displayFiltroMarca = true;
    } else {
      document.getElementById('div_filtro_marcas').style.display = "none";
      document.getElementById('btn_filtro_marcas').innerHTML = '&nbsp;<span class="glyphicon glyphicon-triangle-bottom" aria-hidden="true"></span>';
      displayFiltroMarca = false;
    }
  });

  $("#cat_filter").on('click', '.btn_filtro_categorias', function (e) {
    console.log("COLAPSE CATEGORIA");
    e.preventDefault();
    if (displayFiltroCategoria == false) {
      document.getElementById('div_filtro_categorias').style.display = "block";
      document.getElementById('btn_filtro_categorias').innerHTML = '&nbsp;<span class="glyphicon glyphicon-triangle-top" aria-hidden="true"></span>';
      displayFiltroCategoria = true;
    } else {
      document.getElementById('div_filtro_categorias').style.display = "none";
      document.getElementById('btn_filtro_categorias').innerHTML = '&nbsp;<span class="glyphicon glyphicon-triangle-bottom" aria-hidden="true"></span>';
      displayFiltroCategoria = false;
    }
  });

  $("#cat_filter").on('click', '.btn_filtro_caracteristicas', function (e) {
    e.preventDefault();
    console.log("COLAPSE CARACTERISTICAS: ", e);
    var idDiv = e.currentTarget.id.replace("btn", "div");
    var idBtn = e.currentTarget.id;
    if (document.getElementById(idDiv).style.display == "none") {
      document.getElementById(idDiv).style.display = "block";
      document.getElementById(idBtn).innerHTML = '&nbsp;<span class="glyphicon glyphicon-triangle-top" aria-hidden="true"></span>';
    } else {
      document.getElementById(idDiv).style.display = "none";
      document.getElementById(idBtn).innerHTML = '&nbsp;<span class="glyphicon glyphicon-triangle-bottom" aria-hidden="true"></span>';
    }
  });

  $("#cat_pro").on('click', '.submitProduct', function (e) {
    console.log("SUBMIT PRODUCT HTML", e);
    e.preventDefault();
    var productid = e.currentTarget.id;
    var precio = document.getElementById("cartPrecio").innerHTML;
    var inventario = document.getElementById("cartInventario").innerHTML;
    var cantidad = document.getElementById("cartCantidad").value;
    var product = document.getElementById("hdnProduct").value;
    product = product.replace("%", "%25");
    var product_value = document.getElementById("hdnValue").value;
    var imagenurl = document.getElementById("hdnImagen").value;
    var impuesto = document.getElementById("hdnImpuesto").value;
    var precioob = document.getElementById("hdnPrecioOB").value;
    var precioproductoextra = document.getElementById("hdnprecioextra").value;
    var impuestoproductoextra = document.getElementById("hdnimpuestoextra").value;
    var productoextra = document.getElementById("hdnproductoextra").value;
    var inventarioMaximo = parseFloat(inventario.replace(" Piezas disponibles.", ""));
    // Valida inventario
    if (parseFloat(inventario.replace(" Piezas disponibles.", "")) < parseFloat(cantidad)) {
      // No hay inventario despliega la alerta.
      $("body").scrollTop(0);
      document.getElementById('alertas').innerHTML = buildAlertError("Stock Insuficiente", "No hay suficiente stock este producto sólo tiene disponibles " + inventario.replace(" Piezas disponibles.", "") + " piezas.");
    } else {
      // Hay inventario Procede el submit del producto
      $.ajax({
                type:"GET",
                dataType : 'html',
                url: "/pedidolineas?usuario_id=<%=current_usuario.id%>&producto_id=" + productid + '&cantidad=' + cantidad + '&precio=' + precio.replace("$", "") + "&producto=" + product + "&product_value=" + product_value + "&imagenurl=" + imagenurl + "&invmax=" + inventarioMaximo + "&impuesto=" + impuesto + "&precioob=" + precioob + "&productoextra=" + productoextra + "&precioproductoextra=" + precioproductoextra + "&impuestoproductoextra=" + impuestoproductoextra,
                success: function(datos){
                console.log("$> linea añadida");     
                // Reestablecer Catálogo
                filterData = allData;
                cato.drawFiltros(allData);
                //cato.setData(allData);
                cambiaPaginaPLUS(1, 12);
                document.getElementById('cat_pag').style.display = "initial";
                document.getElementById('cat_fil_aplicados').style.display = 'none';
                jQuery('#cat_fil_aplicados div').html('');
                // Deseleccionar los checks de marca
                $("#cat_filter input[type=checkbox]").prop('checked', false);
                // Desplegar mensaje de producto agregado.
                document.getElementById('alertas').innerHTML = buildAlertSuccess("Producto Agregado", "Se ha agregado el producto correctamente a tu carrito de compra.");
                $("body").scrollTop(0);
                },
                error:  function(){ 
                var mensajeError = '<br><br><br><div align="center"><h1>Ha ocurrido un error al agregar la línea, por favor si el problema persiste cominiquese con su proveedor.</h3></div>'
                  document.getElementById("cat_pro").innerHTML = mensajeError;
                }
        });      
    console.log("Valida Existencia del pedido en Openbravo");
    var pedidoActual = "";
    var openbravo_pedido = "";
    var crear_nuevo = "";
    <% Pedido.where(usuario_id: current_usuario.id).find_each do |ords|%>
      <% if ords.activo? %>
        pedidoActual = "<%= ords.id %>"
      <% end %>
    <% end %>
      // validar si existe la orden en openbravo
      console.log("#> api/v1/pedidonuevos?usuario_id=<%=current_usuario.id%>");
    $.ajax({
            type:"GET",
            dataType : 'json',
            url: "api/v1/pedidosobs?pedido_id=" + pedidoActual,
               success: function(datox){
               console.log("$> Success: ", datox);
               console.log("$> ", datox);
               openbravo_pedido = datox;
                if (openbravo_pedido == undefined) {
                  console.log("No existe el pedido procede normalente " + openbravo_pedido);
                } else {
                  console.log("Ya existe el pedido en openbravo crear uno nuevo y asigna las lineas al nuevo" + openbravo_pedido);
                    $.ajax({
                        type:"GET",
                        dataType : 'json',
                        url: "api/v1/pedidonuevos?usuario_id=<%=current_usuario.id%>",
                           success: function(datox){
                        },
                            error:  function(){ 
                            console.log("$> Ocurrio un error");
                        }
                    });          
                }               
            },
                error:  function(){ 
                console.log("$> Ocurrio un error");
            }
    });          
    }
  });
  $("#cat_pro").on('click', '.close_cart', function (e) {
    console.log("CANCELAR PRODUCT HTML", e);
    e.preventDefault();
    var selected = [];
    $('#cat_filter input:checked').each(function() {
    selected.push($(this).attr('id'));
    });
    //console.log("selected: ", selected);
    multiFiltros(selected);
    //document.getElementById("txt_search").value = parametro;
    $("body").scrollTop(0);    
    //cato.setData(allData);
    //cambiaPaginaPLUS(1, 12);
    //filterData = allData;
    //searchData = allData;
    document.getElementById('cat_pag').style.display = "block";
    // limpiar la sección filtros aplicados
    document.getElementById('cat_fil_aplicados').style.display = 'none';
    //jQuery('#cat_fil_aplicados div').html('');
    //document.getElementById('precioDesde').value = "";
    //document.getElementById('precioHasta').value = "";
    // Deseleccionar los checks de marca
    //$("#cat_filter input[type=checkbox]").prop('checked', false);      
  });
  $(document).on('change', '.selectAuto', function (e) {
    e.preventDefault();
    console.log("Cambia: ", e.currentTarget.id);
    filterHereda(e.currentTarget.id);
    if (document.getElementById("txt_search") != undefined) {
      var parametro = document.getElementById("txt_search").value;
    }
      var selected = [];
      $('#cat_filter input:checked').each(function() {
          selected.push($(this).attr('id'));
      });
      multiFiltros(selected);
      if (document.getElementById("txt_search") != undefined) {
        document.getElementById("txt_search").value = parametro;
      }
      $("body").scrollTop(0);    

  });
  $("#cat_filter").on('click', '.fil_marca', function (e) {
    console.log("Filtro de Marca");
    e.preventDefault();
    filtroMarca(e.target.innerText);
    $("body").scrollTop(0);
  });
  $("#cat_filter").on('click', '.fil_cat', function (e) {
    console.log("Filtro de Categoria");
    e.preventDefault();
    filtroCat(e.target.innerText);
    $("body").scrollTop(0);
  });
  $("#cat_filter").on('click', '.fil_car', function (e) {
    console.log("Filtro de Caracteristica");
    e.preventDefault();
    filtroCar(e.target.id, e.target.innerText);
    $("body").scrollTop(0);
  });  
  $("#cat_side").on('click', '.borraFiltros', function (e) {
    console.log("Borrar Filtros");
    e.preventDefault();
    //cato.setData(allData);
    filterData = allData;
    searchData = allData;
    cambiaPaginaPLUS(1, 12);
    // limpiar la sección filtros aplicados
    document.getElementById('cat_fil_aplicados').style.display = 'none';
    jQuery('#cat_fil_aplicados div').html('');
    // Deseleccionar los checks de marca
    $("#cat_filter input[type=checkbox]").prop('checked', false);
    document.getElementById('precioDesde').value = "";
    document.getElementById('precioHasta').value = "";
    console.log("%> LEN: " + allData.rows.length);
    countProduct = allData.rows.length;
  });
  $("#cat_side").on('keypress', '.txtPrecioLeft', function (e) {
    console.log("Filtro Precio Desde");
    e.preventDefault();
    if (document.getElementById("txt_search") != undefined) {
      var parametro = document.getElementById("txt_search").value;
    }
    var currentEnter = String.fromCharCode(e.keyCode);
    var currentContent = document.getElementById('precioDesde').value;
    document.getElementById('precioDesde').value = currentContent + currentEnter;
    var keycode = (e.keyCode ? e.keyCode : e.which);
    if (keycode == '13') {
      var selected = [];
      $('#cat_filter input:checked').each(function() {
      selected.push($(this).attr('id'));
      });
      //console.log("selected: ", selected);
      multiFiltros(selected);
      document.getElementById("txt_search").value = parametro;
      $("body").scrollTop(0);    
    }
  });
  $("#cat_side").on('keypress', '.txtPrecioRight', function (e) {
    console.log("Filtro Precio Hasta");
    e.preventDefault();
    if (document.getElementById("txt_search") != undefined) {
      var parametro = document.getElementById("txt_search").value;
    }
    //console.log("EVENT: ", e);
    var currentEnter = String.fromCharCode(e.keyCode);
    var currentContent = document.getElementById('precioHasta').value;
    document.getElementById('precioHasta').value = currentContent + currentEnter;
    var keycode = (e.keyCode ? e.keyCode : e.which);
    if (keycode == '13') {
      var selected = [];
      $('#cat_filter input:checked').each(function() {
          selected.push($(this).attr('id'));
      });
      //console.log("selected: ", selected);
      multiFiltros(selected);
      document.getElementById("txt_search").value = parametro;
      $("body").scrollTop(0);          
    }
  });  
  // FILTRO MULTI SELECCION
  $("#cat_filter").on('change', '.fil_marca_chk', function (e) {
    console.log("Filtro de Categoria");
    e.preventDefault();
    console.log("id: " + e.target.id);
      var selected = [];
      $('#cat_filter input:checked').each(function() {
          selected.push($(this).attr('id'));
      });
      console.log("selected: ", selected);
      multiFiltroCategoria(selected);
      $("body").scrollTop(0);    
  });
  $("#cat_filter").on('change', '.fil_multi', function (e) {
    e.preventDefault();
    if (document.getElementById("txt_search") != undefined) {
      var parametro = document.getElementById("txt_search").value;
    }
      var selected = [];
      $('#cat_filter input:checked').each(function() {
          selected.push($(this).attr('id'));
      });
      multiFiltros(selected);
      if (document.getElementById("txt_search") != undefined) {
        document.getElementById("txt_search").value = parametro;
      }
      $("body").scrollTop(0);    
  });  
  $(document).on('click', '.pagChange', function (e) {
    console.log("PÁGINA!");
    e.preventDefault();
    console.log("$> E ", e); 
    cambiaPaginaPLUS(e.target.innerText, e.target.id); 
    $("body").scrollTop(0); 
  });
  $(document).on('click', '.pagNext', function (e) {
    console.log("PÁGINA SIGUIENTE");
    e.preventDefault(); 
    console.log("E: ", e);
    cambiaPaginaPLUS(parseFloat(actualPage) + 1, e.target.id); 
    $("body").scrollTop(0); 
  });
  $(document).on('click', '.pagPrev', function (e) {
    console.log("PÁGINA ANTERIOR");
    e.preventDefault();
    console.log("E: ", e);
    cambiaPaginaPLUS(actualPage - 1, e.target.id); 
    $("body").scrollTop(0); 
  });
function jsonConstructor(json, allPrice) {
  console.log("ALLPRICE: ", allPrice);
  console.log("JSONPROD: ", json);
  //name, value, familia, descargaimg, id
    var rows = [];
    var jsonObject = json.response;
    var jsonRows = allPrice.rows;
    indiceJson = 0;
    for (var i=0;i<jsonObject.totalRows;i++) {
        var row = {};
        row.Producto_ID     = jsonObject.data[i].id;
        row.Nombre          = jsonObject.data[i].name;
        row.Identificador   = jsonObject.data[i].value;
        //row.Familia         = jsonObject.data[i].familia;
        row.DescargaImg     = jsonObject.data[i].descargaimg;
        row.Inventario      = jsonObject.data[i].inventario;
        row.Marca           = jsonObject.data[i].marca;
        row.Categoria       = jsonObject.data[i].categoria;
        row.Busqueda        = jsonObject.data[i].busqueda;
        row.Godzilla        = jsonObject.data[i].godzilla;
        row.Video           =  jsonObject.data[i].video;
        row.autoMarca       =  jsonObject.data[i].autoMarca;
        row.autoModelo       =  jsonObject.data[i].autoModelo;
        row.autoAno        =  jsonObject.data[i].autoAno;

        row.Productoextra   = jsonObject.data[i].productoextraname;
        if (jsonObject.data[i].imagen == "Y"){
          row.Image = "imagenesProductos/" + jsonObject.data[i].id + ".png";
          row.imageId = jsonObject.data[i].image;
        } else {
          // Asignar una imagen por marca si no coicide la marca row.Image = "N"
          row.Image = imagenMarca(row.Marca, row.Categoria);
          if (row.Image == "N") {
            row.Image = "imagenesProductos/noimage.png";
          }
        }
      for (var key in jsonRows) {
        var obj = jsonRows[key]; 
        if (obj.Producto_ID == jsonObject.data[i].id) {
            row.Precio = (parseFloat(obj.Precio)+parseFloat(obj.Impuesto)).toFixed(2);
            //if (row.Nombre == "OPTIMA AMARILLA DEEP 31 T") {console.log("%> Precio = " + obj.Precio + " (Precio) + " + obj.Impuesto + " (Imp)");}
            row.Impuesto = obj.Impuesto;
        }
        if (obj.Producto_ID == jsonObject.data[i].productextra) {
          row.Precioproductoextra = (parseFloat(obj.Precio)+parseFloat(obj.Impuesto)).toFixed(2);
          row.Impuestoproductoextra = obj.Impuesto;
          //if (row.Nombre == "OPTIMA AMARILLA DEEP 31 T") {console.log("%> Precio Extra = " + obj.Precio + " (Precio) + " + obj.Impuesto + " (Imp)");} 
        }
      }
      if (typeof(row.Precioproductoextra) == "undefined"){
        row.Precioproductoextra = 0;
        row.Impuestoproductoextra = 0;
      }
      if (typeof(row.Precio) == "undefined"){
        row.Precio = 0;
        row.Impuesto = 0;
      }
      /*if (row.Nombre == "OPTIMA AMARILLA DEEP 31 T") {console.log("%> Precioshow = " + row.Precio + " (Precio) + " + row.Precioproductoextra + " (precioextra)" + row.Impuestoproductoextra + " impX");}*/
      row.Precioshow = parseFloat(row.Precio) + parseFloat(row.Precioproductoextra);

      // Gestionar Caracteristicas
      if (jsonObject.data[i].caracteristicas != null) {
        var caracteristicas = (jsonObject.data[i].caracteristicas).split("_");
          for (var j = 0; j < caracteristicas.length; j++) {
            carItems = caracteristicas[j].split(":");
            row[carItems[0]] = carItems[1];
            // Si no existe agrega el encabezado
            if (itemsChar.heads.indexOf(carItems[0]) == -1) {
              itemsChar.heads.push(carItems[0]);
            }
            // Si no existe agrega el item
            if (itemsChar.items.indexOf(carItems[0] + "_" + carItems[1]) == -1) {
              itemsChar.items.push(carItems[0] + "_" + carItems[1]);
            }
          }
      }
      // GC 
      var inventarioCompare = parseFloat(row.Inventario.replace(" Piezas", ""))
      //if (row.Precio != 0 && row.Inventario != "0 Piezas") {
      if (row.Precio != 0 && inventarioCompare > 0) {
        row.Indice = indiceJson + 1;
        indiceJson++;
        rows.push(row);
      }
    } 
    // Definir columnas
    var cols = {
        Nombre: {
            index: 1,
            type: "string",
            friendly: "Nombre"
        },
        Identificador: {
            index: 2,
            type: "string",
            friendly: "Identificador"
        },
        /*Familia: {
            index: 3,
            type: "string",
            friendly: "Familia"
        },*/
        DescargaImg: {
            index: 4,
            type: "string",
            hidden: true
        },
        Producto_ID: {
            index: 5,
            type: "string",
            id: true,
            hidden: true
        }
    };
    // Ordenar items
    itemsChar.items = rowsSort(itemsChar.items);
    // Contruir el json de datos
    console.log("$> ITEMS: ", itemsChar);
    var data = {
                cols: cols,
                rows: rows
            };
    console.log("$> Termina Construcción Productos");        
    countProduct = indiceJson;
    return data;
}  // Termina json Constructor
function jsonConstructorPrice(json) {
//name, value, familia, descargaimg, id
  var rows = [];
  var jsonObject = json.response;
  for (var i=0;i<jsonObject.totalRows;i++) {
    //console.log("$> LINEA: ", jsonObject.data[i].impuesto);
      var row = {};
      row.Producto_ID = jsonObject.data[i].product;
      row.Impuesto = (jsonObject.data[i].impuesto).toFixed(2);
      row.Precio = (jsonObject.data[i].pricelista).toFixed(2);
      rows.push(row);
  } 
  // Definir columnas
  var cols = {
      Nombre: {
          index: 1,
          type: "string",
          friendly: "Nombre"
      },
      Identificador: {
          index: 2,
          type: "string",
          friendly: "Identificador"
      },
      /*Familia: {
          index: 3,
          type: "string",
          friendly: "Familia"
      },*/
      DescargaImg: {
          index: 4,
          type: "string",
          hidden: true
      },
      Producto_ID: {
          index: 5,
          type: "string",
          id: true,
          hidden: true
      }
  };
  // Contruir el json de datos
  var data = {
              cols: cols,
              rows: rows
          };
  console.log("$> Termina Construcción Precios");              
  return data;
}  // Termina json Constructor
function buscarPalabra(palabra) {
  var rowsNuevos = [];
  // recorrer alldata
  for (var i=0;i<searchData.rows.length;i++) {
    var currentName = searchData.rows[i].Nombre;
    currentName = currentName.toUpperCase();
    if (currentName.indexOf(palabra.toUpperCase()) > -1) {
      rowsNuevos.push(searchData.rows[i]);
    }
  }
  var rowsNuevos = {
                cols: searchData.cols,
                rows: rowsNuevos
            };
  filterData = rowsNuevos;
  //searchData = rowsNuevos;
  cambiaPaginaPLUS(1, 12);
  //return rowsNuevos;
}
function cambiaPagina(pagina, items) {
  // DESBORDE DE PAGINAS
  if (items == ""){
    items = 12;
  } 
  if (pagina < 1) {
    pagina = 1;
  }
  var allPages = Math.ceil(countProduct / items);
  if (pagina > allPages) {
    pagina = allPages;
  }
  frst = parseFloat(pagina - 1)*parseFloat(items);
  if (frst == 0) {
    frst = 1;
  }

  last = frst + parseFloat(items);
  var jsonRows = allData.rows;
  var rowsNuevos = [];
  for (var key in jsonRows) {
      var obj = jsonRows[key];

      if (obj.Indice >= frst && obj.Indice < last) {
          rowsNuevos.push(obj);
      }
  }
  
  var data = {
      cols: allData.cols,
      rows: rowsNuevos
  };
  actualPage = pagina;
  //filterData = data;
  cato.setData(data);  
}
function cambiaPaginaPLUS(pagina, items) {
  // DESBORDE DE cambiaPaginaPLUS
  if (document.getElementById("txt_search") != undefined) {
    var parametro = document.getElementById("txt_search").value;
  }
  if (items == ""){
    items = 12;
  } 
  if (pagina < 1) {
    pagina = 1;
  }
  var allPages = Math.ceil(countProduct / items);
  if (pagina > allPages) {
    pagina = allPages;
  }

  frst = parseFloat(pagina - 1)*parseFloat(items);
  var jsonRows = filterData.rows;
  var rowsNuevos = [];
  for (var i=0;i<items;i++) {
    if (filterData.rows[frst] != undefined) {
      rowsNuevos.push(filterData.rows[frst]);
      frst++;
    }
  }
  if (rowsNuevos.length > 0) {
    var data = {
      cols: filterData.cols,
      rows: rowsNuevos
  };
  actualPage = pagina;
  //filterData = data;
  console.log("$> elementos setData: " + data.rows.length);
  cato.setData(data);
  }
  if (parametro != undefined) {
    document.getElementById("txt_search").value = parametro;
  }
}

function filtroMarca(marca) {
    var jsonRows = filterData.rows;
    var rowsNuevos = [];
    for (var key in jsonRows) {
        var obj = jsonRows[key]; 
        if (obj.Marca == marca) {
            rowsNuevos.push(obj);
        }
    }
    
    var data = {
        cols: allData.cols,
        rows: rowsNuevos
    };
    // Actualizar Filtros Aplicados
    document.getElementById('cat_fil_aplicados').style.display = 'block';
    var innerDiv = document.createElement('div');
    innerDiv.innerHTML = marca;
    innerDiv.className = 'filtroAplicado';
    var iDiv = document.getElementById('cat_fil_aplicados');
    iDiv.appendChild(innerDiv);
    //
    filterData = data;
    cato.setData(data);
} 
function filtroCat(categoria) {
    var jsonRows = filterData.rows;
    var rowsNuevos = [];
    for (var key in jsonRows) {
        var obj = jsonRows[key]; 
        if (obj.Categoria == categoria) {
            rowsNuevos.push(obj);
        }
    }
    var data = {
        cols: allData.cols,
        rows: rowsNuevos
    };
    // Actualizar Filtros Aplicados
    document.getElementById('cat_fil_aplicados').style.display = 'block';
    var innerDiv = document.createElement('div');
    innerDiv.innerHTML = categoria;
    innerDiv.className = 'filtroAplicado';
    var iDiv = document.getElementById('cat_fil_aplicados');
    iDiv.appendChild(innerDiv);
    //
    //setDataFiltro(data);
    filterData = data;
    cato.setData(data);
}  
function filtroCar(caracteristica, valor) {
    console.log("Filtro CAR");
    console.log("En la caracteristica " + caracteristica + " buscar el valor " + valor);
    var jsonRows = filterData.rows;
    var rowsNuevos = [];
    for (var key in jsonRows) {
        var obj = jsonRows[key]; 
        //console.log("$> obj." + caracteristica + " = " + obj[caracteristica]);
        //console.log("$> OBJ ", obj);
        if (obj[caracteristica] == valor) {
            rowsNuevos.push(obj);
        }
    }
    var data = {
        cols: allData.cols,
        rows: rowsNuevos
    };
    // Actualizar Filtros Aplicados
    document.getElementById('cat_fil_aplicados').style.display = 'block';
    var innerDiv = document.createElement('div');
    innerDiv.innerHTML = valor;
    innerDiv.className = 'filtroAplicado';
    var iDiv = document.getElementById('cat_fil_aplicados');
    iDiv.appendChild(innerDiv);
    //
    //setDataFiltro(data);
    filterData = data;
    cato.setData(data);
}
function filtroPrecio() {
  console.log("$> " + document.getElementById('precioDesde').value + " - " + document.getElementById('precioHasta').value);
    var precioDesde = document.getElementById('precioDesde').value;
    var precioHasta = document.getElementById('precioHasta').value;
    /*if (precioHasta == null) {precioHasta = Infinity;}
    if (precioDesde == null) {precioDesde = 0;}*/
    var jsonRows = filterData.rows;
    var rowsNuevos = [];
    if (precioHasta == "" && precioDesde == "") {
      console.log("Filtros de precios vacios");
    }
    for (var key in jsonRows) {
        var obj = jsonRows[key]; 
        if (precioHasta == "" && precioDesde != "") {
          if (parseFloat(obj.Precio) >= parseFloat(precioDesde)) {
              rowsNuevos.push(obj);
          }            
        }
        if (precioHasta != "" && precioDesde == "") {
          if (parseFloat(obj.Precio) <= parseFloat(precioHasta)) {
            rowsNuevos.push(obj);
          }
        }
        if (precioHasta == "" && precioDesde == "") {
            rowsNuevos.push(obj);
        }
        if (precioHasta != "" && precioDesde != "") {
          if (parseFloat(obj.Precio) >= parseFloat(precioDesde) && parseFloat(obj.Precio) <= parseFloat(precioHasta)) {
              rowsNuevos.push(obj);
          }
        }

    }
    var data = {
        cols: allData.cols,
        rows: rowsNuevos
    };

    document.getElementById('cat_fil_aplicados').style.display = 'block';
    filterData = data;
    searchData = data;
    //cato.setData(data);
    cambiaPaginaPLUS(1, 12);
}
// FILTROS MULTISELECCIÓN
function multiFiltroMarca(marcas) {
      var jsonRows = allData.rows;
      var rowsNuevos = [];
      for (var key in jsonRows) {
          var obj = jsonRows[key]; 
          if (marcas.indexOf(obj.Marca) > -1) {
              rowsNuevos.push(obj);
          }
      }
      
      var data = {
          cols: allData.cols,
          rows: rowsNuevos
      };
      // Actualizar Filtros Aplicados
      document.getElementById('cat_fil_aplicados').style.display = 'block';
      filterData = data;
      cato.setData(data);
} 
function multiFiltrosDeprecado(checks) {
  var jsonRows = allData.rows;
  var rowsNuevos = [];
  varMar = false;
  varCat = false;
  varCar = false;
  prodAdd = false;
  // validar existencia de categorias, marcas y caracteristicas
  console.log("ChKs: ", checks );
  for (var key in jsonRows) {
      var obj = jsonRows[key];
      if (!varMar && checks.indexOf(obj.Marca)>-1){
        varMar = true;
      }
      if (!varCat && checks.indexOf(obj.Categoria)>-1){
        varCat = true;
      }

  }          
      for (var key in jsonRows) {
          var obj = jsonRows[key]; 
          if ((checks.indexOf(obj.Categoria) > -1 && checks.indexOf(obj.Marca) > -1 && varCat && varMar) || (checks.indexOf(obj.Categoria) > -1 && !varMar) || (checks.indexOf(obj.Marca) > -1 && !varCat)) {
              rowsNuevos.push(obj);
              prodAdd = true;
          } else {
            // validaciones para caracteristicas
            for (var ch = 0;ch<checks.length;ch++) {
              var arrayCar = checks[ch].split("_");
              if (arrayCar.length == 2){
                if (checks.indexOf(arrayCar[0] + '_' + obj[arrayCar[0]]) > -1 && !prodAdd){
                  rowsNuevos.push(obj);   
                }
              }              
            }
          }
        prodAdd = false;
      }
      
      var data = {
          cols: allData.cols,
          rows: rowsNuevos
      };
      // Actualizar Filtros Aplicados
      document.getElementById('cat_fil_aplicados').style.display = 'block';
      if (checks.length == 0){
        console.log("vacio");
        data = allData;
      }
      filterData = data;
      searchData = data;
      // AGREGADO AL FINAL
      // Si existe algo escrito en los precios aplica el filtro primero
      var precioDesde = document.getElementById('precioDesde').value;
      var precioHasta = document.getElementById('precioHasta').value;
      if (precioDesde != "" || precioHasta != "") {
        filtroPrecio();
      }
      // AGREGADO AL FINAL      
      cambiaPaginaPLUS(1, 12);
      //cato.setData(data);
}  
function multiFiltros(checks) {
  console.log("APLICAR FILTROS!!");

  // Filtro automotriz
  actualMarca = "";
  actualModelo = "";
  actualAno = "";
  var rowsNuevos = [];
  if (document.getElementById("selectAutoMarca") != undefined) {
    var ddm = document.getElementById("selectAutoMarca");
    actualMarca = ddm.options[ddm.selectedIndex].value;      
  }
  if (document.getElementById("selectAutoModelo") != undefined) {
    var ddd = document.getElementById("selectAutoModelo");
    actualModelo = ddd.options[ddd.selectedIndex].value;  
  }
  if (document.getElementById("selectAutoAno") != undefined) {
    var dda = document.getElementById("selectAutoAno");
    actualAno = dda.options[dda.selectedIndex].value;  
  }

  if (actualMarca != 0 || actualAno != 0 || actualModelo != 0) {
    for (var ix=0;ix<allData.rows.length;ix++) {
      // Auto Marca
      var marca_equal = false;
      var modelo_equal = false;
      var ano_equal = false;
      if (allData.rows[ix].autoMarca == actualMarca) {
        marca_equal = true;
      }
      if (allData.rows[ix].autoModelo == actualModelo) {
        modelo_equal = true;
      }
      if (allData.rows[ix].autoAno == actualAno) {
        ano_equal = true;
      }        
      
      if (ano_equal && modelo_equal && marca_equal && actualMarca != 0 && actualAno != 0 && actualModelo != 0) {
        rowsNuevos.push(allData.rows[ix]);
      }  
      if (ano_equal && modelo_equal && !marca_equal && actualMarca == 0 && actualAno != 0 && actualModelo != 0) {
        rowsNuevos.push(allData.rows[ix]);
      }  
      if (ano_equal && !modelo_equal && marca_equal && actualMarca != 0 && actualAno != 0 && actualModelo == 0) {
        rowsNuevos.push(allData.rows[ix]);
      }  
      if (!ano_equal && modelo_equal && marca_equal && actualMarca != 0 && actualAno == 0 && actualModelo != 0) {
        rowsNuevos.push(allData.rows[ix]);
      }  
      if (ano_equal && !modelo_equal && !marca_equal && actualMarca == 0 && actualAno != 0 && actualModelo == 0) {
        rowsNuevos.push(allData.rows[ix]);
      }        
      if (!ano_equal && modelo_equal && !marca_equal && actualMarca == 0 && actualAno == 0 && actualModelo != 0) {
        rowsNuevos.push(allData.rows[ix]);
      }  
      if (!ano_equal && !modelo_equal && marca_equal && actualMarca != 0 && actualAno == 0 && actualModelo == 0) {
        rowsNuevos.push(allData.rows[ix]);
      }  

    }  
    var jsonRows = rowsNuevos;
  } else {
    jsonRows = allData.rows;
  }

    var rowsNuevos = [];

  // Aplicar filtros de búsqueda por palabras clave
  var palabra = "";
  if (document.getElementById("txt_search") != undefined) {
    palabra = document.getElementById("txt_search").value;
  }
    var rowsNuevos = [];
    for (var i=0;i<jsonRows.length;i++) {
      var currentName = jsonRows[i].Nombre;
      var currentSearch = jsonRows[i].Busqueda;
      if (currentSearch != undefined) {
        currentSearch = currentSearch.toUpperCase();
      } else {
        currentSearch = "";
      }

      //currentSearch = currentSearch.toUpperCase();
      if (currentName.indexOf(palabra.toUpperCase()) > -1 || currentSearch.indexOf(palabra.toUpperCase()) > -1) {
        rowsNuevos.push(jsonRows[i]);
      }
    }


    // Filtrar por precio
    console.log("$> " + document.getElementById('precioDesde').value + " - " + document.getElementById('precioHasta').value);
    var precioDesde = document.getElementById('precioDesde').value;
    var precioHasta = document.getElementById('precioHasta').value;
    var jsonRows = rowsNuevos;
    var rowsNuevos = [];
    for (var key in jsonRows) {
        var obj = jsonRows[key]; 
        if (precioHasta == "" && precioDesde != "") {
          if (parseFloat(obj.Precio) >= parseFloat(precioDesde)) {
              rowsNuevos.push(obj);
          }            
        }
        if (precioHasta != "" && precioDesde == "") {
          if (parseFloat(obj.Precio) <= parseFloat(precioHasta)) {
            rowsNuevos.push(obj);
          }
        }
        if (precioHasta == "" && precioDesde == "") {
            rowsNuevos.push(obj);
        }
        if (precioHasta != "" && precioDesde != "") {
          if (parseFloat(obj.Precio) >= parseFloat(precioDesde) && parseFloat(obj.Precio) <= parseFloat(precioHasta)) {
              rowsNuevos.push(obj);
          }
        }

    }  
    // Filtros de checks
    console.log("CHECKS: ", checks);
    if (checks.length > 0) {
      var jsonRows = rowsNuevos;
      var rowsNuevos = [];
      var arrCat = [];
      var arrMar = [];
      var arrCar = [];
      
      // Definir arreglos con parámetros seleccionados.
      for (var key in jsonRows) {
          var obj = jsonRows[key];
          if (checks.indexOf(obj.Marca)>-1 && arrMar.indexOf(obj.Marca)==-1){
            arrMar.push(obj.Marca);
          }
          if (checks.indexOf(obj.Categoria)>-1 && arrCat.indexOf(obj.Categoria)==-1){
            arrCat.push(obj.Categoria);
          }
      }
      // Validar si de todas las caracteristicas que existen hay alguna seleccionada
      for (var i=0;i<itemsChar.items.length;i++) {
        if (checks.indexOf(itemsChar.items[i])>-1 && arrCar.indexOf(itemsChar.items[i])==-1) {
          arrCar.push(itemsChar.items[i]);
        }
      }
      var mar = arrMar.length;
      var cat = arrCat.length;
      var car = arrCar.length;
      var in_mar = false;
      var in_car = false;
      var in_cat = false;
      console.log("MARCAS: ", arrMar);
      console.log("CATEGORIA: ", arrCat);
      console.log("CARACTERISTIAS: ", arrCar);
      // Recorrer todos los productos en busca de coincidencias
      for (var key in jsonRows) {
        var obj = jsonRows[key];
        // Valida si coincide Marca
        if (arrMar.indexOf(obj.Marca) > -1) {
          in_mar = true;
        }
        // Valida si coincide Categoria
        if (arrCat.indexOf(obj.Categoria) > -1) {
          in_cat = true;
        }    
        // Valida si coincide Caracteristica
        for (var ch = 0;ch<arrCar.length;ch++) {
          var arrayCar = arrCar[ch].split("_");
          if (obj[arrayCar[0]] == arrayCar[1]) {
            in_car = true;
          }
        }
        // Valida distintos casos
        // sólo selección marca
        //console.log("DBG: mar: " + mar + " cat: " + cat + " car: " + car + " in_cat: " + in_cat + " in_car " + in_car + " in_mar: " + in_mar);
        if (mar > 0 && cat == 0 && car == 0 && in_mar == true && in_cat == false && in_car == false) {
          rowsNuevos.push(obj);
          //console.log("SM");
        }
        // sólo selección categoria
        if (mar == 0 && cat > 0 && car == 0 && in_cat == true && in_car == false && in_mar == false) {
          rowsNuevos.push(obj);
          //console.log("SC");
        }
        // sólo selección caracteristica
        if (mar == 0 && cat == 0 && car > 0 && in_car == true && in_mar == false && in_cat == false) {
          rowsNuevos.push(obj);
          //console.log("SR");
        }
        // selección marca y categoría
        if (mar > 0 && cat > 0 && car == 0 && in_cat == true && in_mar == true && in_car == false) {
          rowsNuevos.push(obj);
          //console.log("MC");
        }
        // selección marca y caracteristica
        if (mar > 0 && cat == 0 && car > 0 && in_mar == true && in_car == true && in_cat == false) {
          rowsNuevos.push(obj);
          //console.log("MR");
        }
        // selección categoría y caracteristica
        if (mar == 0 && cat > 0 && car > 0 && in_cat == true && in_car == true && in_mar == false) {
          rowsNuevos.push(obj);
          //console.log("CR");
        }
        // selección categoría, caracteristica y marcas
        if (mar > 0 && cat > 0 && car > 0 && in_cat == true && in_car == true && in_mar == true) {
          rowsNuevos.push(obj);
          //console.log("MCR");
        }
        in_mar = false;
        in_cat = false;
        in_car = false;
      }
      
      // Actualizar Filtros Aplicados
      document.getElementById('cat_fil_aplicados').style.display = 'block';
      if (checks.length == 0){
        console.log("vacio");
        //data = allData;
      }
    } // cheks - lenght

    // Cambiar el JSON
    var newData = {
                  cols: allData.cols,
                  rows: rowsNuevos
              };
    filterData = newData;

    if(rowsNuevos.length == 0) {
        console.log("Limpiar Catalogo");
        cato.limpiarCatalogo()
    }

    cambiaPaginaPLUS(1, 12);

}

function multiFiltros_RESPALDO(checks) {
  console.log("NUEVO MULTIFILTROS");
  var jsonRows = allData.rows;
  var rowsNuevos = [];
  var arrCat = [];
  var arrMar = [];
  var arrCar = [];
  console.log("FILTROS: ", checks);
  // Definir arreglos con parámetros seleccionados.
  for (var key in jsonRows) {
      var obj = jsonRows[key];
      if (checks.indexOf(obj.Marca)>-1 && arrMar.indexOf(obj.Marca)==-1){
        arrMar.push(obj.Marca);
      }
      if (checks.indexOf(obj.Categoria)>-1 && arrCat.indexOf(obj.Categoria)==-1){
        arrCat.push(obj.Categoria);
      }
  }
  // Validar si de todas las caracteristicas que existen hay alguna seleccionada
  for (var i=0;i<itemsChar.items.length;i++) {
    if (checks.indexOf(itemsChar.items[i])>-1 && arrCar.indexOf(itemsChar.items[i])==-1) {
      arrCar.push(itemsChar.items[i]);
    }
  }
  var mar = arrMar.length;
  var cat = arrCat.length;
  var car = arrCar.length;
  var in_mar = false;
  var in_car = false;
  var in_cat = false;
  console.log("MARCAS: ", arrMar);
  console.log("CATEGORIA: ", arrCat);
  console.log("CARACTERISTIAS: ", arrCar);
  // Recorrer todos los productos en busca de coincidencias
  for (var key in jsonRows) {
    var obj = jsonRows[key];
    // Valida si coincide Marca
    if (arrMar.indexOf(obj.Marca) > -1) {
      in_mar = true;
    }
    // Valida si coincide Categoria
    if (arrCat.indexOf(obj.Categoria) > -1) {
      in_cat = true;
    }    
    // Valida si coincide Caracteristica
    for (var ch = 0;ch<arrCar.length;ch++) {
      var arrayCar = arrCar[ch].split("_");
      if (obj[arrayCar[0]] == arrayCar[1]) {
        in_car = true;
      }
    }
    // Valida distintos casos
    // sólo selección marca
    //console.log("DBG: mar: " + mar + " cat: " + cat + " car: " + car + " in_cat: " + in_cat + " in_car " + in_car + " in_mar: " + in_mar);
    if (mar > 0 && cat == 0 && car == 0 && in_mar == true && in_cat == false && in_car == false) {
      rowsNuevos.push(obj);
      //console.log("SM");
    }
    // sólo selección categoria
    if (mar == 0 && cat > 0 && car == 0 && in_cat == true && in_car == false && in_mar == false) {
      rowsNuevos.push(obj);
      //console.log("SC");
    }
    // sólo selección caracteristica
    if (mar == 0 && cat == 0 && car > 0 && in_car == true && in_mar == false && in_cat == false) {
      rowsNuevos.push(obj);
      //console.log("SR");
    }
    // selección marca y categoría
    if (mar > 0 && cat > 0 && car == 0 && in_cat == true && in_mar == true && in_car == false) {
      rowsNuevos.push(obj);
      //console.log("MC");
    }
    // selección marca y caracteristica
    if (mar > 0 && cat == 0 && car > 0 && in_mar == true && in_car == true && in_cat == false) {
      rowsNuevos.push(obj);
      //console.log("MR");
    }
    // selección categoría y caracteristica
    if (mar == 0 && cat > 0 && car > 0 && in_cat == true && in_car == true && in_mar == false) {
      rowsNuevos.push(obj);
      //console.log("CR");
    }
    // selección categoría, caracteristica y marcas
    if (mar > 0 && cat > 0 && car > 0 && in_cat == true && in_car == true && in_mar == true) {
      rowsNuevos.push(obj);
      //console.log("MCR");
    }
    in_mar = false;
    in_cat = false;
    in_car = false;
  }
  var data = {
      cols: allData.cols,
      rows: rowsNuevos
  };
  // Actualizar Filtros Aplicados
  document.getElementById('cat_fil_aplicados').style.display = 'block';
  if (checks.length == 0){
    console.log("vacio");
    data = allData;
  }

  filterData = data;
  searchData = data;
  // AGREGADO AL FINAL
  // Si existe algo escrito en los precios aplica el filtro primero
  var precioDesde = document.getElementById('precioDesde').value;
  var precioHasta = document.getElementById('precioHasta').value;
  if (precioDesde != "" || precioHasta != "") {
    filtroPrecio();
  }
  // AGREGADO AL FINAL      
  cambiaPaginaPLUS(1, 12);
  //cato.setData(data);
  // Si no hay resultados limpia la pagina
    if(data.rows.length == 0) {
      console.log("Limpiar Catalogo");
      //cato.limpiarCatalogo();

  }
}

// Asigna una imagen a los productos en función de su Marca o Categoría cuando estos no tienen una asignada.
function imagenMarca(marca, categoria) {
  imagen = "N";
  if (marca == "11 - AGM") {
    imagen = "imagenesProductos/imagenesMarca/agm.png";
  }
  if (marca == "21 - AMERICA") {
    imagen = "imagenesProductos/imagenesMarca/america.png";
  }
  if (marca == "30 - CRONOS") {
    imagen = "imagenesProductos/imagenesMarca/cronos.png";
  }
  if (marca == "28 - DIENER") {
    imagen = "imagenesProductos/imagenesMarca/diener.png";
  }
  if (marca == "50 - FILTROS LTH") {
    imagen = "imagenesProductos/imagenesMarca/filtros.png";
  }
  if (marca == "15 - HEAVY DUTY") {
    imagen = "imagenesProductos/imagenesMarca/heavyduty.png";
  }
  if (marca == "12 - HI-TEC") {
    imagen = "imagenesProductos/imagenesMarca/hitec.png";
  }
  if (marca == "40 - MOTOBATERIAS") {
    imagen = "imagenesProductos/imagenesMarca/motobateria.png";
  }
  if (marca == "10 - OPTIMA") {
    imagen = "imagenesProductos/imagenesMarca/optima.png";
  }
  if (marca == "31 - POWER CONNECTION") {
    imagen = "imagenesProductos/imagenesMarca/powerconnection.png";
  }
  if (marca == "RE") {
    imagen = "imagenesProductos/imagenesMarca/re.jpg";
  }
  if (categoria == "4 - LUBRICANTES") {
    imagen = "imagenesProductos/imagenesCategoria/lubricante.png";
  }
  return imagen;
}
function buildAddProduct(productID) {
  var buildHTML = '<h3>Añadir Producto</h3><br>'
  // Buscar el producto.
  var jsonRows = allData.rows;
  for (var key in jsonRows) {
      var obj = jsonRows[key]; 
      if (obj.Producto_ID == productID) {
        var pextra = "";
        var montoextra = 0;
        montoextra = (parseFloat(obj.Precioproductoextra)).toFixed(2);
        if (montoextra > 0) {
            pextra = '<div style="font-size:100%;color:grey;padding-left:1%;padding-top:1%;">Incluye $' + String(montoextra) + ' (' + obj.Productoextra +  ')</div>';
        }
        buildHTML += '<br><div style="border:0px solid blue;width:100%;">';
        //buildHTML += '<div style="border:0px solid green;width:60%;float:left;height:100%;" align="center"><img src="'+obj.Image+'" width="50%"></img></div>';
        //buildHTML += '<div style="border:0px solid green;width:60%;float:left;height:100%;" align="center"><iframe width="100%" height="350px" src="http://www.youtube.com/embed/qKqnOlx8Okk?autoplay=0"></iframe></div>';
        //buildHTML += '<div style="border:0px solid green;width:60%;float:left;height:100%;" align="center"><iframe width="100%" height="350px" src="http://www.youtube.com/embed/qKqnOlx8Okk?autoplay=0"></iframe></div>';

        // Gestionar videos
        
        if (obj.Video != null && obj.Video != "") {
          buildHTML += '<div style="border:0px solid green;width:60%;float:left;height:100%;" align="center"><iframe width="100%" height="350px" src="http://www.youtube.com/embed/' + obj.Video.replace("https://www.youtube.com/watch?v=", "") +'?autoplay=0"></iframe></div>';          
        } else {
          buildHTML += '<div style="border:0px solid green;width:60%;float:left;height:100%;" align="center"><img class="add_image_popup" data-image-id="" width="50%"></img></div>';
        }

        // Panel Derecho Titulo
        buildHTML += '<div style="border:0px solid red;width:40%;float:left;height:100%;padding:1% 1% 1% 1%;">';
        buildHTML += '<div style="border:0px solid red;width:100%" align="right"><input type="button" value="x" class="btn-close close_cart"/></div>';
        buildHTML += '<div align="left"><h2>'+obj.Nombre+'</h2></div>';
        // Identificador
        buildHTML += '<div align="left" class="cartValue" id="cartValue">' + obj.Identificador + '</div>';
        // Precio
        buildHTML += '<div align="left" class="cartPrecio" id="cartPrecio">$' + (parseFloat(obj.Precioshow)).toFixed(2) + '</div>' + pextra;
        // Inventario
        if (mostrarInventario == "true") {
            buildHTML += '<div align="left" class="cartInventario" id="cartInventario">' + obj.Inventario + ' disponibles.</div>';
        } else {
            //buildHTML += '<div align="left" class="cartInventario" id="cartInventario"></div>';
            buildHTML += '<div align="left" style="display:none;" class="cartInventario" id="cartInventario">' + obj.Inventario + ' disponibles.</div>';
        }
        // Cantidad
        buildHTML += '<hr width="80%" align="left"><div  align="left" class="cartCantidad">Cantidad: &nbsp;<input type="text" id="cartCantidad" value="1"/></div>';
        // BtonAgregar
        buildHTML += '<div class="cartBtn" align="left"><br><input id="' + obj.Producto_ID + '" type="button" value="añadir producto al carrito" class="btn btn-default btn-anadir submitProduct"> </div>';
        // Valores ocultos para envío de parametros
        buildHTML += '<input type="hidden" id="hdnProduct" value="'+obj.Nombre+'"/><input type="hidden" id="hdnValue" value="'+obj.Identificador+'"/><input type="hidden" id="hdnImagen" value="'+obj.Image+'"/><input type="hidden" id="hdnImpuesto" value="'+obj.Impuesto+'"/><input type="hidden" id="hdnPrecioOB" value="'+obj.Precio+'"/><input type="hidden" id="hdnproductoextra" value="'+obj.Productoextra+'"/><input type="hidden" id="hdnprecioextra" value="'+obj.Precioproductoextra+'"/><input type="hidden" id="hdnimpuestoextra" value="'+obj.Impuestoproductoextra+'"/>';
        // Cierra panel derecho
        buildHTML += '</div></div>';
      }
  }
  return buildHTML;
}

function filterHereda(id) {
  // selectAutoMarca selectAutoModelo selectAutoAno
  console.log("FILTROS: " + id);


  auto_modelo = '<option value="0">elige un modelo</option>';
  auto_ano = '<option value="0">elige un año</option>';
  var ano_auto = [];
  var modelo_auto = [];
  var ind_add = [];
  if (id == "selectAutoMarca") {
    var ddm = document.getElementById("selectAutoMarca");
    var actualMarca = ddm.options[ddm.selectedIndex].value;
    console.log(": Marca actual: " + actualMarca);
    for (var m=0;m<arrayFiltrosAuto.length;m++) {
      console.log(": Marca iter: " + arrayFiltrosAuto[m].marca);
      if (arrayFiltrosAuto[m].marca == actualMarca && modelo_auto.indexOf(arrayFiltrosAuto[m].modelo) == -1 && ind_add.indexOf(m) == -1) {
        auto_modelo += '<option value = "'+arrayFiltrosAuto[m].modelo+'">' + arrayFiltrosAuto[m].modelo + '</option>';
        modelo_auto.push(arrayFiltrosAuto[m].modelo);
        ind_add.push(m);
      }
    }
    console.log("$$> " + auto_modelo);
    //document.getElementById("selectAutoModelo").innerHTML = auto_modelo;
  }
    if (id == "selectAutoModelo") {
    var ddm = document.getElementById("selectAutoModelo");
    var actualModelo = ddm.options[ddm.selectedIndex].value;
    console.log(": Modelo actual: " + actualModelo);
    for (var m=0;m<arrayFiltrosAuto.length;m++) {
      console.log(": Modelo iter: " + arrayFiltrosAuto[m].modelo);
      if (arrayFiltrosAuto[m].modelo == actualModelo && ano_auto.indexOf(arrayFiltrosAuto[m].ano) == -1 && ind_add.indexOf(m) == -1) {
        auto_ano += '<option value = "'+arrayFiltrosAuto[m].ano+'">' + arrayFiltrosAuto[m].ano + '</option>';
        ano_auto.push(arrayFiltrosAuto[m].ano);
        ind_add.push(m);
      }
    }
  }
  console.log("$$> " + auto_modelo);
  console.log("$$> " + auto_ano);
  if (id == "selectAutoMarca") {
    document.getElementById("selectAutoModelo").innerHTML = auto_modelo;
    document.getElementById("selectAutoAno").innerHTML = '<option value="0">elige un año</option>';
  }
  if (id == "selectAutoModelo") {
    document.getElementById("selectAutoAno").innerHTML = auto_ano;
  }  
}

function rowsSort(array) {
  var newRows = [];
  // Generar un array con sólo los nombres
  for (var i=0;i<array.length;i++) {
    newRows.push(array[i]);
  }
  // Ordenar el array
  newRows.sort();
  // Recorrer el array ordenado cuando el nombre coincida con el del array de entrada reemplazar
  /*for (var j=0;j<array.length;j++) {
    for (var k=0;k<newRows.length;k++) {
      if (array[j] == newRows[k]) {
        newRows[k] = array[j];
      }
    }
  } */ 
  return newRows;
}

function buildAlertSuccess(titulo, mensaje) {
  return '<div id="alert_limite" class="alert alert-success alert-dismissible fade in" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4>' + titulo + '</h4><p>' + mensaje + '<br>Visita tu carrito de compra <a href="/carrito">aqui</a></p></div>';
}
function buildAlertError(titulo, mensaje) {
  return '<div id="alert_limite" class="alert alert-danger alert-dismissible fade in" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4>' + titulo + '</h4><p>' + mensaje + '</p></div>';
}
});
  </script>





</body>
</html>